<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=no">
    <meta name="apple-mobile-web-app-title" content="Water Heater">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black" />
    <link rel="apple-touch-icon" sizes="120x120" href="images/touch-icon.png">
    <link rel="stylesheet" type="text/css" href="css/style.css">
    <script src="js/angular.js"></script>
    <script src="js/angular-resource.js"></script>
    <script src="js/angular-poller.js"></script>
  </head>
  <body>
    <div ng-app="myApp" ng-controller="myCtrl">
      <div ng-repeat="led in leds">
        <div class="led" style="background-color: #{{ led.color }};"></div>
      </div>
      <div class="relay-button {{ relay.state }}" ng-click="toggleRelay()"></div>
      <div ng-show="relay.on_since !== ''">On for <span time-since="relay.on_since"></span></div>
    </div>

    <script>
      var app = angular.module('myApp', [ 'ngResource', 'emguo.poller' ]);
      app.controller('myCtrl', [ '$scope', '$resource', 'poller', function($scope, $resource, poller) {
        /* Relay Control */
        var Relay = $resource('/relay', null,
          {
            'update': { method: 'PUT' },
          });

        /* LEDs */
        var LEDs = $resource('/leds', null,
          {
            'get': { method: 'GET', isArray: true },
          });

        /* Poller */
        var pollingOptions = {
          delay: 2000,
          smart: true,
        }
        var pollerRelay = poller.get(Relay, pollingOptions);
        var pollerLEDs = poller.get(LEDs, pollingOptions);

        pollerRelay.promise.then(null, null, function(relay) { $scope.relay = relay; });
        pollerLEDs.promise.then(null, null, function(leds) { $scope.leds = leds; });

        $scope.toggleRelay = function () {
          poller.stopAll();
          $scope.relay.state = $scope.relay.state == 'on' ? 'off' : 'on';
          $scope.relay.$update(function() { poller.restartAll(); });
        }
      }])
      .directive('timeSince', [ '$interval', function($interval) {
        function link(scope, element, attrs) {
          var time, timeoutId;

          function updateTime() {
            var diff = new Date(Date.now() - (new Date(time)).getTime());
            var hh = diff.getUTCHours();
            var mm = diff.getUTCMinutes();
            var ss = diff.getUTCSeconds();

            if (hh < 10) hh = '0' + hh;
            if (mm < 10) mm = '0' + mm;
            if (ss < 10) ss = '0' + ss;

            element.text(hh + ':' + mm + ':' + ss);
          }

          scope.$watch(attrs.timeSince, function(value) {
            time = value;
            updateTime();
          });

          element.on('$destroy', function() {
            $interval.cancel(timeoutId);
          });

          timeoutId = $interval(function() {
            updateTime();
          }, 1000);
        }

        return {
          link: link,
        };
      }]);
    </script>
  </body>
</html>
